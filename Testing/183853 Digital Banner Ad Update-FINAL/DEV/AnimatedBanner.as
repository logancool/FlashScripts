package{		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.utils.Timer;		public class AnimatedBanner extends MovieClip	{				private var _hitAreaBtn						:MovieClip;		private var _animation						:MovieClip;		private var _repeatCounter					:int;		private var _repeatTotal					:int = 0;		private var _repeatTimer					:Timer;		private var _repeatDelay					:Number = 4;		private var _startDelay						:Number = 5;		private var _ctaTag							:String = "";		private var _ctaTarget						:String = "_blank";		private var _replayBtn						:MovieClip;		private var _legalBtn						:MovieClip;		private var _ctaBtn							:MovieClip;		private var _legalTxt						:MovieClip;								public function AnimatedBanner()		{			_animation = this.animation;			_hitAreaBtn = this.hitAreaBtn;			if (this.replayBTN)			{				_replayBtn = this.replayBTN;				_replayBtn.buttonMode = true;				_replayBtn.visible = false;			}			if (this.legalBTN)			{				_legalBtn = this.legalBTN;				_legalBtn.buttonMode = true;				_legalBtn.visible = false;			}			if (this.legalTxt)			{				_legalTxt = this.legalTxt;				_legalTxt.visible = false;			}		}				private function init(repeatTotal:int = 3):void		{			_repeatTotal = repeatTotal;			_hitAreaBtn.addEventListener(MouseEvent.CLICK, handleHitAreaClick);			_hitAreaBtn.buttonMode = true;						_animation.addEventListener(Event.COMPLETE, handleAnimationComplete);			playAnimation();		}				private function playAnimation():void		{			_repeatCounter ++;			_animation.gotoAndPlay(2);		}				private function getClickTag():String{			if (root.loaderInfo.parameters.clickTAG)			{				return root.loaderInfo.parameters.clickTAG;			}		    for (var key:String in root.loaderInfo.parameters)		        if(key.toLowerCase()=="clicktag")		            return root.loaderInfo.parameters[key];		    return "";		}				private function handleHitAreaClick(e:MouseEvent):void		{			var ctaTag:String = getClickTag();			var ctaTarget:String = _ctaTarget;			/*			if (root.loaderInfo.parameters.hasOwnProperty("clickTAG"))			{				ctaTag = root.loaderInfo.parameters.clickTAG;			}						if (root.loaderInfo.parameters.hasOwnProperty("clickTag"))			{				ctaTag = root.loaderInfo.parameters.clickTag;			}			if (root.loaderInfo.parameters.hasOwnProperty("clicktag"))			{				ctaTag = root.loaderInfo.parameters.clicktag;			}			*/			if (root.loaderInfo.parameters.hasOwnProperty("target"))			{				ctaTarget = root.loaderInfo.parameters.target;			}						/*			if (root.loaderInfo.parameters.clickTAG.substr(0,5) == "http:") {      			ctaTag = root.loaderInfo.parameters.clickTAG;    		}			*/			try			{				navigateToURL(new URLRequest(ctaTag), ctaTarget);			}			catch(e:Error)			{				trace(e);			}		}		private function handleLegalRollover(e:MouseEvent):void		{			showLegal();		}		private function handleLegalRollout(e:MouseEvent):void		{			hideLegal();		}		private function showLegal():void		{			animation.visible = false;			_legalTxt.visible = true;			_ctaBtn.visible = false;		}		private function hideLegal():void		{			animation.visible = true;			_legalTxt.visible = false;			_ctaBtn.visible = true;		}		private function handleReplayClick(e:MouseEvent):void		{			handleTimerComplete(null);		}				private function killTimer():void		{			if (_repeatTimer != null)			{				_repeatTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, handleTimerComplete);				_repeatTimer.stop();				_repeatTimer = null;			}		}				private function createTimer():void		{			killTimer();			_repeatTimer = new Timer(_repeatDelay * 1000, 1);			_repeatTimer.addEventListener(TimerEvent.TIMER_COMPLETE, handleTimerComplete);			_repeatTimer.start();		}				private function handleTimerComplete(e:TimerEvent):void		{			killTimer();			if (_replayBtn)			{				_replayBtn.visible = false;				_replayBtn.removeEventListener(MouseEvent.CLICK, handleReplayClick);			}			if (_legalBtn)			{				_legalBtn.visible = false;				_legalBtn.removeEventListener(MouseEvent.ROLL_OVER, handleLegalRollover);				_legalBtn.removeEventListener(MouseEvent.ROLL_OUT, handleLegalRollout);			}			if (this.ctaContainer)			{				this.ctaContainer.gotoAndPlay("HIDE");			}			_animation.gotoAndPlay("RESTART");		}				private function handleAnimationComplete(e:Event):void		{			if (_replayBtn)			{				_replayBtn.visible = true;				_replayBtn.addEventListener(MouseEvent.CLICK, handleReplayClick);			}			if (_legalBtn)			{				_legalBtn.visible = true;				_legalBtn.addEventListener(MouseEvent.ROLL_OVER, handleLegalRollover);				_legalBtn.addEventListener(MouseEvent.ROLL_OUT, handleLegalRollout);			}			if (this.ctaContainer)			{				_ctaBtn = this.ctaContainer.ctaBtn;				_ctaBtn.mouseChildren = false;				_ctaBtn.addEventListener(MouseEvent.MOUSE_OVER, handleCTARollOver);				_ctaBtn.addEventListener(MouseEvent.MOUSE_OUT, handleCTARollOut);				_ctaBtn.addEventListener(MouseEvent.CLICK, handleHitAreaClick);				_ctaBtn.buttonMode = true;				this.ctaContainer.gotoAndPlay("SHOW");							}			if (_repeatCounter >= _repeatTotal)			{				return;			}			createTimer();		}				private function handleCTARollOver(e:MouseEvent):void		{			_ctaBtn.gotoAndPlay("OVER");			//_ctaBtn.glimmer.gotoAndPlay("start");		}				private function handleCTARollOut(e:MouseEvent):void		{			_ctaBtn.gotoAndPlay("OUT");		}				private function addRollover():void		{			_hitAreaBtn.addEventListener(MouseEvent.ROLL_OVER, handleCTARollOver);			_hitAreaBtn.addEventListener(MouseEvent.ROLL_OUT, handleCTARollOut);		}				private function removeRollOver():void		{			_hitAreaBtn.removeEventListener(MouseEvent.ROLL_OVER, handleCTARollOver);			_hitAreaBtn.removeEventListener(MouseEvent.ROLL_OUT, handleCTARollOut);		}	}}